// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import edu.wpi.first.wpilibj.DutyCycleEncoder;
import edu.wpi.first.wpilibj.motorcontrol.PWMSparkMax;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.RobotContainer;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS



/**
 *
 */
public class Climb extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
    private DutyCycleEncoder climbCheck;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private PWMSparkMax climbR;
private PWMSparkMax climbL;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private double climbEncoder = 30;


    /**
    *
    */
    public Climb() {

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
climbR = new PWMSparkMax(9);
 addChild("sparkMaxR",climbR);
 climbR.setInverted(false);

climbL = new PWMSparkMax(8);
 addChild("sparkMaxL",climbL);
 climbL.setInverted(true);


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    climbCheck = new DutyCycleEncoder(5);
     addChild("climbcheck", climbCheck);
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        SmartDashboard.putNumber("deg", climbCheck.get());
        if (SmartDashboard.getNumber("deg", climbCheck.get()) >= climbEncoder/2) {
            SmartDashboard.putBoolean("deg half", true);
        }
        
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    

    public void startClimb() {
        if (climbCheck.get() < climbEncoder){
            climbL.set(Math.abs(RobotContainer.getInstance().accessory.getLeftY()));
            climbR.set(Math.abs(RobotContainer.getInstance().accessory.getRightY()));
        } 
        else {
            climbL.set(0);
            climbR.set(0);
        }
    }

    public void stopClimb() {
        climbL.set(0);
        climbR.set(0);
    }

}

